/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Assignment;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;

/**
 *
 * @author User
 */
public class ListofAvailableUI extends javax.swing.JFrame {

    /**
     * Creates new form ListofAvailableUI
     */
    public ListofAvailableUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        text_label = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Available_area = new javax.swing.JTextArea();
        Search_button = new javax.swing.JButton();
        Combo_button = new javax.swing.JComboBox<>();
        Option_label = new javax.swing.JLabel();
        Back_button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        text_label.setText("LIST OF AVAILABLE");

        Available_area.setColumns(20);
        Available_area.setRows(5);
        jScrollPane2.setViewportView(Available_area);

        Search_button.setText("Search");
        Search_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Search_buttonActionPerformed(evt);
            }
        });

        Combo_button.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Prof. Ali", "Prof. Abu", "Prof. Lee", "Hang Tuah" }));

        Option_label.setText("Choose Options :");

        Back_button.setText("Dashboard");
        Back_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Back_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(Back_button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Search_button)
                        .addGap(62, 62, 62))
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(text_label)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Option_label)
                                .addGap(52, 52, 52)
                                .addComponent(Combo_button, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(223, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(text_label)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Combo_button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Option_label))
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Search_button)
                    .addComponent(Back_button))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Search_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Search_buttonActionPerformed
    String selectedProfessor = Combo_button.getSelectedItem().toString();  // Get the selected professor

    // Check if a professor is selected (or "All" is chosen)
    if (selectedProfessor.equals("Choose")) {
        JOptionPane.showMessageDialog(this, "Please select a Professor.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Initialize a StringBuilder to store available lecturers' consultations
    StringBuilder availableLecturers = new StringBuilder();

    // Read the consultation slots from the file
    File file = new File("consultation_slots.txt");
    try (BufferedReader br = new BufferedReader(new FileReader(file))) {
        String line;
        boolean foundSlots = false;

        while ((line = br.readLine()) != null) {
            String[] data = line.split(",");
            if (data.length == 3) {
                String professor = data[0];
                String date = data[1];
                String time24hr = data[2]; // Time in 24-hour format

                // Convert the time from 24-hour to 12-hour format (AM/PM)
                String timeInAmPm = convertToAmPm(time24hr);

                // If "All" is selected, show slots for all professors
                if (selectedProfessor.equals("All") || professor.equals(selectedProfessor)) {
                    availableLecturers.append("Lecturer: ").append(professor)
                                       .append(", Date: ").append(date)
                                       .append(", Time: ").append(timeInAmPm)
                                       .append("\n");
                    foundSlots = true;
                }
            }
        }

        // If no slots are found for the selected professor, display a message
        if (!foundSlots) {
            availableLecturers.append("No available slots for the selected professor.");
        }

        // Display the result in the JTextArea (Available_area)
        Available_area.setText(availableLecturers.toString());

    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Error reading consultation slots.", "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
}

// Helper method to convert 24-hour time format to 12-hour AM/PM format
private String convertToAmPm(String time24hr) {
    try {
        SimpleDateFormat sdf24 = new SimpleDateFormat("HH:mm"); // 24-hour format
        SimpleDateFormat sdf12 = new SimpleDateFormat("hh:mm a"); // 12-hour format with AM/PM
        Date date = sdf24.parse(time24hr);
        return sdf12.format(date); // Convert to AM/PM format
    } catch (Exception e) {
        e.printStackTrace();
        return "";
    }
    }//GEN-LAST:event_Search_buttonActionPerformed

    private void Back_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Back_buttonActionPerformed
        Dashboard DashboardScreen = new Dashboard();
        DashboardScreen.setVisible(true);
        this.dispose();
        
    }//GEN-LAST:event_Back_buttonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListofAvailableUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListofAvailableUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListofAvailableUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListofAvailableUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ListofAvailableUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea Available_area;
    private javax.swing.JButton Back_button;
    private javax.swing.JComboBox<String> Combo_button;
    private javax.swing.JLabel Option_label;
    private javax.swing.JButton Search_button;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel text_label;
    // End of variables declaration//GEN-END:variables
}
