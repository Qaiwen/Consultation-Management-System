/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Assignment;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JOptionPane;

/**
 *
 * @author User
 */
public class MakeConsultationUI extends javax.swing.JFrame {

    /**
     * Creates new form MakeConsultationUI
     */
    public MakeConsultationUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        name_label = new javax.swing.JLabel();
        NameCombo_button = new javax.swing.JComboBox<>();
        date_label = new javax.swing.JLabel();
        time_label = new javax.swing.JLabel();
        DateCombo_button = new javax.swing.JComboBox<>();
        TimeCombo_button = new javax.swing.JComboBox<>();
        Confirm_button = new javax.swing.JButton();
        Back_button = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        Name_field = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        name_label.setText("Lecturer Name");

        NameCombo_button.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Prof. Ali", "Prof. Abu", "Prof. Lee", "Hang Tuah" }));
        NameCombo_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NameCombo_buttonActionPerformed(evt);
            }
        });

        date_label.setText("Available Date");

        time_label.setText("Available Time");

        DateCombo_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DateCombo_buttonActionPerformed(evt);
            }
        });

        TimeCombo_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TimeCombo_buttonActionPerformed(evt);
            }
        });

        Confirm_button.setText("Confirm");
        Confirm_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Confirm_buttonActionPerformed(evt);
            }
        });

        Back_button.setText("Back to Dashboard");
        Back_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Back_buttonActionPerformed(evt);
            }
        });

        jLabel1.setText("Student Name:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(Back_button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 127, Short.MAX_VALUE)
                .addComponent(Confirm_button)
                .addGap(52, 52, 52))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(name_label)
                    .addComponent(date_label)
                    .addComponent(time_label)
                    .addComponent(jLabel1))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(NameCombo_button, 0, 153, Short.MAX_VALUE)
                    .addComponent(DateCombo_button, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(TimeCombo_button, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Name_field))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(name_label)
                    .addComponent(NameCombo_button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(date_label)
                    .addComponent(DateCombo_button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(time_label)
                    .addComponent(TimeCombo_button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(Name_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 87, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Confirm_button)
                    .addComponent(Back_button))
                .addGap(46, 46, 46))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NameCombo_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NameCombo_buttonActionPerformed
        // Get the selected lecturer's name
    String selectedLecturer = NameCombo_button.getSelectedItem().toString();

    // Clear previous selections in DateCombo_button and TimeCombo_button
    DateCombo_button.removeAllItems();
    TimeCombo_button.removeAllItems();

    // Check if a lecturer is selected (not "Choose")
    if (selectedLecturer.equals("Choose")) {
        return;  // Do nothing if "Choose" is selected
    }

    // Read from the consultation_slots.txt file
    File file = new File("consultation_slots.txt");
    if (file.exists()) {
        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            String line;
            // Iterate through each line in the file
            while ((line = br.readLine()) != null) {
                String[] data = line.split(",");
                if (data.length >= 3) {
                    String lecturerName = data[0].trim(); // Lecturer name in the file
                    String date = data[1].trim(); // Date in the file
                    String time = data[2].trim(); // Time in the file

                    // Check if the lecturer matches the selected one
                    if (lecturerName.equals(selectedLecturer)) {
                        // Add the date and time to the combo boxes
                        DateCombo_button.addItem(date);
                        TimeCombo_button.addItem(time);
                    }
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading the consultation slots file.", "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    } else {
        JOptionPane.showMessageDialog(this, "The consultation slots file does not exist.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_NameCombo_buttonActionPerformed

    private void Back_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Back_buttonActionPerformed
        Dashboard DashboardScreen = new Dashboard();
        DashboardScreen.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_Back_buttonActionPerformed

    private void DateCombo_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DateCombo_buttonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DateCombo_buttonActionPerformed

    private void TimeCombo_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TimeCombo_buttonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TimeCombo_buttonActionPerformed

    private void Confirm_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Confirm_buttonActionPerformed
 String name = NameCombo_button.getSelectedItem().toString();
    String date = DateCombo_button.getSelectedItem().toString();
    String time = TimeCombo_button.getSelectedItem().toString();
    String studentName = Name_field.getText();

    // Check if any field is empty (not selected)
    if (name.equals("Choose") || date.equals("Choose") || time.equals("Choose") || studentName.isEmpty()) {
        // Show error message if any field is not filled
        JOptionPane.showMessageDialog(this, "Error: Please select Name, Date, and Time.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        return;  // Exit the method if any field is empty
    }

    // Check if the selected time exists for the lecturer in consultation_slots.txt
    if (!isTimeSlotValid(name, date, time)) {
        JOptionPane.showMessageDialog(this, "The selected time " + time + " for " + name + " on " + date + " is not available. Please choose a valid time slot from the available options.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        return;  // Exit if the time slot is not valid
    }

    // Create or append to the consultations.txt file to validate availability
    File consultationsFile = new File("consultations.txt");

    try {
        // Check if the consultations.txt file exists
        if (!consultationsFile.exists()) {
            boolean fileCreated = consultationsFile.createNewFile();
            if (fileCreated) {
                System.out.println("File created: " + consultationsFile.getName());
            } else {
                System.out.println("File already exists.");
            }
        }

        // Read the consultations.txt file to check if the selected time is already taken
        BufferedReader br = new BufferedReader(new FileReader(consultationsFile));
        String line;
        boolean isTimeTaken = false;

        while ((line = br.readLine()) != null) {
            String[] data = line.split(",");
            if (data.length == 4) {
                String storedName = data[0].trim();
                String storedDate = data[1].trim();
                String storedTime = data[2].trim();

                // Check if the lecturer, date, and time match
                if (storedName.equals(name) && storedDate.equals(date) && storedTime.equals(time)) {
                    isTimeTaken = true; // Time is already taken
                    break;
                }
            }
        }
        br.close();

        // If the time is already taken, show an error message
        if (isTimeTaken) {
            JOptionPane.showMessageDialog(this, "The selected time is already booked for " + name + " on " + date + ". Please choose a different time.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        } else {
            // Now add the consultation to the consultations.txt file
            try (BufferedWriter bw = new BufferedWriter(new FileWriter(consultationsFile, true))) {
                bw.write(name + "," + date + "," + time + "," + studentName);
                bw.newLine();  // Move to the next line after appending
                JOptionPane.showMessageDialog(this, "Consultation successfully scheduled for " + name + " on " + date + " at " + time, "Success", JOptionPane.INFORMATION_MESSAGE);
            }
        }

    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "An error occurred while saving the consultation.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}

// Function to check if the selected time and date are available for the lecturer in consultation_slots.txt
private boolean isTimeSlotValid(String name, String date, String time) {
    File consultationSlotsFile = new File("consultation_slots.txt");

    try {
        // Check if the consultation_slots.txt file exists
        if (!consultationSlotsFile.exists()) {
            boolean fileCreated = consultationSlotsFile.createNewFile();
            if (fileCreated) {
                System.out.println("File created: " + consultationSlotsFile.getName());
            } else {
                System.out.println("File already exists.");
            }
        }

        // Read the consultation_slots.txt file to check if the selected time and date are available
        BufferedReader br = new BufferedReader(new FileReader(consultationSlotsFile));
        String line;
        boolean isTimeSlotValid = false;

        while ((line = br.readLine()) != null) {
            String[] data = line.split(",");
            if (data.length == 3) {
                String storedName = data[0].trim();
                String storedDate = data[1].trim();
                String storedTime = data[2].trim();

                // Check if the lecturer, date, and time match
                if (storedName.equals(name) && storedDate.equals(date) && storedTime.equals(time)) {
                    isTimeSlotValid = true; // Time slot is valid
                    break;
                }
            }
        }
        br.close();

        return isTimeSlotValid;

    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "An error occurred while checking available times.", "Error", JOptionPane.ERROR_MESSAGE);
        return false;
    }
    }//GEN-LAST:event_Confirm_buttonActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MakeConsultationUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MakeConsultationUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MakeConsultationUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MakeConsultationUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MakeConsultationUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back_button;
    private javax.swing.JButton Confirm_button;
    private javax.swing.JComboBox<String> DateCombo_button;
    private javax.swing.JComboBox<String> NameCombo_button;
    private javax.swing.JTextField Name_field;
    private javax.swing.JComboBox<String> TimeCombo_button;
    private javax.swing.JLabel date_label;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel name_label;
    private javax.swing.JLabel time_label;
    // End of variables declaration//GEN-END:variables
}
